<launch>
  <arg name="camera_name" description="E.g., camera0, camera1, etc"/>

  <!-- we do not use the standard image_raw name to avoid naming conflicts -->
  <let name="image_decompressed_topic" value="/sensing/camera/$(var camera_name)/image_rect_color/decompressed"/>
  <let name="image_compressed_topic" value="/sensing/camera/$(var camera_name)/image_rect_color/compressed"/>

  <let name="camera_info_topic" value="/sensing/camera/$(var camera_name)/camera_info"/>
  <let name="pointcloud_topic" value="/sensing/lidar/top/pointcloud_raw"/>

  <let name="calibrate_sensor" value="false"/>
  <let name="calibrate_sensor" value="true" if="$(eval &quot;'$(var camera_name)' == 'camera0' &quot;)"/>
  <let name="calibrate_sensor" value="true" if="$(eval &quot;'$(var camera_name)' == 'camera1' &quot;)"/>
  <let name="calibrate_sensor" value="true" if="$(eval &quot;'$(var camera_name)' == 'camera2' &quot;)"/>
  <let name="calibrate_sensor" value="true" if="$(eval &quot;'$(var camera_name)' == 'camera3' &quot;)"/>
  <let name="calibrate_sensor" value="true" if="$(eval &quot;'$(var camera_name)' == 'camera4' &quot;)"/>
  <let name="calibrate_sensor" value="true" if="$(eval &quot;'$(var camera_name)' == 'camera5' &quot;)"/>
  <let name="calibrate_sensor" value="true" if="$(eval &quot;'$(var camera_name)' == 'camera6' &quot;)"/>
  <let name="calibrate_sensor" value="true" if="$(eval &quot;'$(var camera_name)' == 'camera7' &quot;)"/>
  <let name="calibrate_sensor" value="true" if="$(eval &quot;'$(var camera_name)' == 'traffic_light_left_camera' &quot;)"/>

  <let name="camera_frame" value="$(var camera_name)/camera_link"/>

  <let name="rviz_profile" value=""/>
  <let name="rviz_profile" value="$(find-pkg-share extrinsic_tag_based_pnp_calibrator)/rviz/tag_calib_$(var camera_name)_velodyne_top.rviz"/>

  <let name="lidar_model" value="velodyne_vls128"/>

  <!-- image decompressor -->
  <node pkg="image_transport_decompressor" exec="image_transport_decompressor_node" name="decompressor" output="screen">
    <remap from="decompressor/input/compressed_image" to="$(var image_compressed_topic)"/>
    <remap from="decompressor/output/raw_image" to="$(var image_decompressed_topic)"/>
  </node>

  <!-- tag based calibrator -->
  <include file="$(find-pkg-share extrinsic_tag_based_pnp_calibrator)/launch/calibrator.launch.xml" if="$(var calibrate_sensor)">
    <arg name="image_topic" value="$(var image_decompressed_topic)"/>
    <arg name="camera_info_topic" value="$(var camera_info_topic)"/>
    <arg name="pointcloud_topic" value="$(var pointcloud_topic)"/>
    <arg name="pointcloud_topic_ex" value="$(var camera_info_topic)"/>
    <arg name="lidar_model" value="$(var lidar_model)"/>
    <arg name="calibration_service_name" value="calibrate_camera_lidar"/>
  </include>

  <!-- interactive calibrator -->
  <group if="$(var calibrate_sensor)">
    <node pkg="extrinsic_interactive_calibrator" exec="interactive_calibrator" name="interactive_calibrator" output="screen">
      <remap from="pointcloud" to="$(var pointcloud_topic)"/>
      <remap from="image" to="$(var image_compressed_topic)"/>
      <remap from="camera_info" to="$(var camera_info_topic)"/>
      <remap from="calibration_points_input" to="calibration_points"/>

      <param name="camera_frame" value="$(var camera_frame)"/>
      <param name="use_calibration_api" value="false"/>
      <param name="can_publish_tf" value="false"/>
    </node>

    <include file="$(find-pkg-share intrinsic_camera_calibration)/launch/optimizer.launch.xml"/>
    <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(var rviz_profile)"/>
  </group>
</launch>
